import java.io.*;         
import java.util.*;         
import java.math.*;         

 
public class Main  implements Runnable {
//public static final String FileName = "test";
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
Scanner in;
static final int inf = 1000000000;
 
int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}
long nextLong() throws IOException{      
    ST.nextToken();      
    return (long)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
   new Thread(new Main()).start();
}
 
public void run()  {      
    try {
    	br = new BufferedReader(new InputStreamReader(System.in));
    	out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    	
    	//br = new BufferedReader(new FileReader(new File("input.txt")));
    	//out = new PrintWriter(new BufferedWriter(new FileWriter("output.txt")));
    	in = new Scanner(br);
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();
        //in.close();
        br.close();   
    }         
    catch (IOException e) {       
    	e.printStackTrace();
    	throw new IllegalStateException(e);  
    }      
}
String s1 = 

String s2 = 

void go(BigInteger x, BigInteger d) {
	if (d.toString().length()==2001) {
		out.println(d);
		return;
	}	
	
	for (int i=1; i<10; i++) {
		BigInteger y = d.multiply(BigInteger.valueOf(i)).add(x);
		if (y.multiply(y).toString().endsWith(y.toString())) {
			
			go(y, d.multiply(BigInteger.TEN));
			return;
		}
	}
	go(x, d.multiply(BigInteger.TEN));
}
public void solve() throws IOException {
	//go(BigInteger.valueOf(5), BigInteger.TEN);
	//go(BigInteger.valueOf(6), BigInteger.TEN);
	int n = nextInt();
	int i = s1.length();
	int j = s2.length();
	int res = 1;
	while (n-->0) {
		i--; j--;
		if (i>=0 && s1.charAt(i)!='0') res++;
		if (j>=0 && s2.charAt(j)!='0') res++;
	}
	out.println(res);
	
}
  
}













 
 
  